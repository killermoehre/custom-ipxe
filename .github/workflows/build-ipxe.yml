---
name: build-iPXE
on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    schedule:
        - cron: 35 01 * * *
env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
    check:
        name: Check latest ipxe/ipxe release
        runs-on: ubuntu-20.04
        outputs:
            is-new-release: ${{ steps.compare-releases.outputs.is-new-release }}
            new-release-version: ${{ steps.new-ipxe-ipxe-tag.outputs.new-release-version }}
        steps:
            - name: Checkout ${{ github.repository }}
              uses: actions/checkout@v2
            - name: Get latest ipxe/ipxe tag json from API
              uses: JamesIves/fetch-api-data-action@1.0.15
              with:
                  ENDPOINT: https://api.github.com/repos/ipxe/ipxe/tags
                  SAVE_NAME: new-ipxe-ipxe-tags
            - name: Extract latest version tag from fetch-api-data-action/ipxe-ipxe-tags.json
              id: new-ipxe-ipxe-tag
              run: |
                  TAG="$(jq -r '.[0].name' fetch-api-data-action/new-ipxe-ipxe-tags.json)"
                  echo "::debug::OLD_TAG=$TAG"
                  echo "::set-env name=new-ipxe-ipxe-tag::${TAG}"
                  echo "::set-output name=new-release-version::${TAG}"
            - name: Extract old version tag from old-ipxe-ipxe-tags.json
              run: |
                  if [[ -e fetch-api-data-action/old-ipxe-ipxe-tags.json ]]; then
                      TAG="$(jq -r '.[0].name' fetch-api-data-action/old-ipxe-ipxe-tags.json)"
                  else
                      TAG="v0.0.0"
                  fi
                  echo "::debug::NEW_TAG=$TAG"
                  echo "::set-env name=old-ipxe-ipxe-tag::${TAG}"
            - name: Compare old and new ipxe/ipxe tag
              id: compare-releases
              env:
                  OLD_TAG: ${{ env.old-ipxe-ipxe-tag }}
                  NEW_TAG: ${{ env.new-ipxe-ipxe-tag }}
              run: |
                  if [[ "$OLD_TAG" == "$NEW_TAG" ]]; then
                      NEW_RELEASE='false'
                  else
                      NEW_RELEASE='true'
                  fi
                  echo "::debug::NEW_RELEASE=$NEW_RELEASE"
                  echo "::set-output name=is-new-release::$NEW_RELEASE"
            - name: Rename ipxe-ipxe-tags.json
              run: mv fetch-api-data-action/new-ipxe-ipxe-tags.json fetch-api-data-action/old-ipxe-ipxe-tags.json
              if: ${{ steps.compare-releases.outputs.is-new-release }}
            - name: Upload old-ipxe-ipxe-tags.json
              uses: EndBug/add-and-commit@v4.4.0
              with:
                  add: fetch-api-data-action/old-ipxe-ipxe-tags.json
                  message: New upstream tag ${{ env.new-ipxe-ipxe-tag }}
              if: ${{ steps.compare-releases.outputs.is-new-release }}
    build:
        name: Build iPXE
        runs-on: ubuntu-20.04
        strategy:
            matrix:
                binary: [bin/undionly.kpxe, bin-x86_64-efi/ipxe.efi]
        needs: [check]
        if: ${{ needs.check.outputs.is-new-release }}
        steps:
            - name: Install Build Dependencies
              run: sudo apt-get install -y binutils-dev liblzma-dev syslinux genisoimage jq tree
            - name: Checkout ${{ github.repository }}
              uses: actions/checkout@v2
              with:
                  path: custom-ipxe
            - name: Checkout ipxe/ipxe
              uses: actions/checkout@v2
              with:
                  repository: ipxe/ipxe
                  ref: ${{ needs.check.outputs.new-release-version }}
                  path: ipxe
            - name: Put custom config into the build dir
              run: cp custom-ipxe/general.h ipxe/src/config/local/
            - name: Build iPXE ${{ matrix.binary }}
              env:
                  BINARY: ${{ matrix.binary }}
              run: make -C src "$BINARY"
              working-directory: ipxe
            - name: Get filename from ${{ matrix.binary }}
              env:
                  BINARY: ${{ matrix.binary }}
              run: echo "::set-env name=filename::${BINARY##*/}"
            - name: Debug File Listing
              env:
                  ACTIONS_STEP_DEBUG: secrets.ACTIONS_STEP_DEBUG
              run: test "$ACTIONS_STEP_DEBUG" && tree
            - name: Upload ${{ matrix.binary }} artifact as ${{ env.filename }}
              id: upload-build-artifact
              uses: actions/upload-artifact@v2.1.4
              with:
                  name: ${{ env.filename }}
                  path: ipxe/src/${{ matrix.binary }}
                  if-no-files-found: error
    create-release:
        name: Release built iPXE
        runs-on: ubuntu-20.04
        outputs:
            release: ${{ steps.create-tag.outputs.current_tag }}
            upload-url: ${{ steps.create-release.outputs.upload_url }}
        needs: [check, build]
        if: ${{ needs.check.outputs.is-new-release }}
        steps:
            - name: Create todays tag
              id: create-tag
              run: |
                  printf -v current_tag 'name=current-tag::%s-%(%Y-%m-%d)T\n' '${{ needs.check.outputs.new-release-version }}' '-1'
                  echo "::debug::$current_tag"
                  echo "::set-env $current_tag"
                  echo "::set-output $current_tag"
            - name: Create Release
              id: create-release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ env.current-tag }}
                  release_name: Release iPXE ${{ needs.check.outputs.new-release-version }} with HTTPS support
                  draft: false
                  prerelease: false
    upload-release:
        name: Upload built iPXE to release
        runs-on: ubuntu-20.04
        strategy:
            matrix:
                binary: [bin/undionly.kpxe, bin-x86_64-efi/ipxe.efi]
        needs: [check, create-release]
        if: ${{ needs.check.outputs.is-new-release }}
        steps:
            - name: Get filename from ${{ matrix.binary }}
              env:
                  BINARY: ${{ matrix.binary }}
              run: echo "::set-env name=filename::${BINARY##*/}"
            - name: Download artifact ${{ matrix.binary }} as ${{ env.filename }}
              uses: actions/download-artifact@v2.0.5
              with:
                  name: ${{ env.filename }}
            - name: Add artifact ${{ env.filename }} to release ${{ needs.create-release.outputs.release }}
              uses: actions/upload-release-asset@v1.0.2
              with:
                  upload_url: ${{ needs.create-release.outputs.upload-url }}
                  asset_path: ${{ env.filename }}
                  asset_name: ${{ env.filename }}
                  asset_content_type: application/octet-stream
